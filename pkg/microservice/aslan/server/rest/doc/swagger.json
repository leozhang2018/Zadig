{
    "swagger": "2.0",
    "info": {
        "description": "The API doc is targeting for Zadig developers rather than Zadig users.\nThe majority of these APIs are not designed for public use, there is no guarantee on version compatibility.\nPlease reach out to contact@koderover.com before you decide to depend on these APIs directly.",
        "title": "Zadig aslan service REST APIs",
        "contact": {
            "email": "contact@koderover.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "paths": {
        "/api/aslan/collaboration/collaborations/sync": {
            "post": {
                "description": "Sync Collaboration Instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collaboration"
                ],
                "summary": "Sync Collaboration Instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.SyncCollaborationInstanceArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/delivery/releases/check": {
            "get": {
                "description": "Check Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery"
                ],
                "summary": "Check Delivery Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/delivery/releases/k8s": {
            "post": {
                "description": "Create K8S Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery"
                ],
                "summary": "Create K8S Delivery Version",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateK8SDeliveryVersionArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments": {
            "put": {
                "description": "Update Multi products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Update Multi products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "is force",
                        "name": "force",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "updateMultiK8sEnv body",
                        "name": "k8s_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.UpdateEnv"
                            }
                        }
                    },
                    {
                        "description": "updateMultiHelmEnv body",
                        "name": "helm_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateMultiHelmProductArg"
                        }
                    },
                    {
                        "description": "updateMultiCvmEnv body",
                        "name": "pm_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.UpdateEnv"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Create Product(environment)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Create Product(environment)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env type",
                        "name": "envType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "scene",
                        "name": "scene",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "is auto",
                        "name": "auto",
                        "in": "query"
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.CreateSingleProductArg"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/:name/helm/releases": {
            "delete": {
                "description": "Delete helm release from envrionment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Delete helm release from envrionment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "release names",
                        "name": "releaseNames",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}": {
            "get": {
                "description": "Get Product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_core_environment_service.ProductResp"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Delete Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "is delete",
                        "name": "is_delete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/analysis": {
            "post": {
                "description": "Run environment Analysis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Run environment Analysis",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EnvAnalysisRespone"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/analysis/cron": {
            "get": {
                "description": "Get Env Analysis Cron",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Env Analysis Cron",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EnvAnalysisCronArg"
                        }
                    }
                }
            },
            "put": {
                "description": "Upsert Env Analysis Cron",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Upsert Env Analysis Cron",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.EnvAnalysisCronArg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/configs": {
            "get": {
                "description": "Get environment configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get environment configs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EnvConfigsArgs"
                        }
                    }
                }
            },
            "put": {
                "description": "Update environment configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Update environment configs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.EnvConfigsArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/globalVariableCandidates": {
            "get": {
                "description": "Get global variable candidates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get global variable candidates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ServiceVariableKV"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/k8s/globalVariables": {
            "put": {
                "description": "Update global variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Update global variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.updateK8sProductGlobalVariablesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/services": {
            "get": {
                "description": "List services in env",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "List services in env",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EnvServices"
                        }
                    }
                }
            },
            "put": {
                "description": "Delete services from envrionment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Delete services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteProductServicesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/services/{serviceName}": {
            "put": {
                "description": "Update service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Update service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.SvcRevision"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/services/{serviceName}/execmd": {
            "post": {
                "description": "Exec VM Service Command",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Exec VM Service Command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "host id",
                        "name": "hostId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "start",
                            "stop",
                            "restart"
                        ],
                        "type": "string",
                        "description": "vm service command type",
                        "name": "commandType",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "serivce name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ExecVmServiceCommandResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/services/{serviceName}/preview": {
            "post": {
                "description": "Preview service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Preview service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.PreviewServiceArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SvcDiffResult"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/services/{serviceName}/yaml": {
            "get": {
                "description": "Fetch Service Yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Fetch Service Yaml",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.FetchServiceYamlResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/share/portal/{serviceName}": {
            "get": {
                "description": "Get Portal Service for Share Env",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Portal Service for Share Env",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.GetPortalServiceResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Setup Portal Service for Share Env",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Setup Portal Service for Share Env",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.SetupPortalServiceRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/sleep": {
            "post": {
                "description": "Environment Sleep",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Environment Sleep",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "enable or disable",
                        "name": "action",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/sleep/cron": {
            "get": {
                "description": "Get Env Sleep Cron",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Env Sleep Cron",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EnvSleepCronArg"
                        }
                    }
                }
            },
            "put": {
                "description": "Upsert Env Sleep Cron",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Upsert Env Sleep Cron",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.EnvSleepCronArg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/version/{serviceName}": {
            "get": {
                "description": "List Environment Service Versions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "List Environment Service Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name or release name when isHelmChart is true",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is helm chart type",
                        "name": "isHelmChart",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.ListEnvServiceVersionsResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/version/{serviceName}/diff": {
            "get": {
                "description": "Diff Environment Service Versions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Diff Environment Service Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name or release name when isHelmChart is true",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "revision a",
                        "name": "revisionA",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "revision b",
                        "name": "revisionB",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is helm chart type",
                        "name": "isHelmChart",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "release name",
                        "name": "releaseName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ListEnvServiceVersionsResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/version/{serviceName}/revision/{revision}": {
            "get": {
                "description": "Get Environment Service Version Yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Environment Service Version Yaml",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name or release name when isHelmChart is true",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "revision",
                        "name": "revision",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is helm chart type",
                        "name": "isHelmChart",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "release name",
                        "name": "releaseName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GetEnvServiceVersionYamlResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/environments/{name}/version/{serviceName}/rollback": {
            "post": {
                "description": "Rollback Environment Service Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Rollback Environment Service Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name or release name when isHelmChart is true",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "revision",
                        "name": "revision",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is helm chart type",
                        "name": "isHelmChart",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/init/type/{envType}": {
            "post": {
                "description": "Initialize Environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Initialize Environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env type",
                        "name": "envType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "host",
                            "mobile"
                        ],
                        "type": "string",
                        "description": "application name, used only in vm env type",
                        "name": "appType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/init_info/{name}": {
            "get": {
                "description": "Get init product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get init product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project template name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env type",
                        "name": "envType",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "is base env",
                        "name": "isBaseEnv",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "base env",
                        "name": "baseEnv",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.getInitProductResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/kube/helm/releaseInstances": {
            "post": {
                "description": "Get Release Instance Deploy Status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Release Instance Deploy Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.HelmDeployStatusCheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GetReleaseInstanceDeployStatusResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/kube/k8s/resources": {
            "post": {
                "description": "Get Resource Deploy Status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Resource Deploy Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.K8sDeployStatusCheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.ServiceDeployStatus"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/kube/pods": {
            "get": {
                "description": "Get Pods Info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Pods Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "projectName",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "envName",
                        "name": "envName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.ListPodsInfoRespone"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/kube/pods/{podName}": {
            "get": {
                "description": "Get Pods Detail Info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Pods Detail Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "projectName",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "envName",
                        "name": "envName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "podName",
                        "name": "podName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resource.Pod"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/production/environments/{name}/check/istioGrayscale/{op}/ready": {
            "get": {
                "description": "Check Istio Grayscale Ready",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Check Istio Grayscale Ready",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "operation",
                        "name": "op",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.IstioGrayscaleReady"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/production/environments/{name}/helm/charts": {
            "put": {
                "description": "Update helm product charts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Update helm product charts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.EnvRendersetArg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/production/environments/{name}/istioGrayscale/config": {
            "get": {
                "description": "Get Istio Grayscale Config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Istio Grayscale Config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.IstioGrayscale"
                        }
                    }
                }
            },
            "post": {
                "description": "Set Istio Grayscale Config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Set Istio Grayscale Config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/kube.SetIstioGrayscaleConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/production/environments/{name}/istioGrayscale/enable": {
            "post": {
                "description": "Enable Istio Grayscale",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Enable Istio Grayscale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "description": "Disable Istio Grayscale",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Disable Istio Grayscale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/production/environments/{name}/istioGrayscale/portal/{serviceName}": {
            "get": {
                "description": "Get Portal Service for Istio Grayscale",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Portal Service for Istio Grayscale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.GetPortalServiceResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Setup Portal Service for Istio Grayscale",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Setup Portal Service for Istio Grayscale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.SetupPortalServiceRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/environment/production/environments/{name}/workloads": {
            "get": {
                "description": "List Workloads In Env",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "List Workloads In Env",
                "parameters": [
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.ServiceResp"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/production/rendersets/renderchart": {
            "post": {
                "description": "Get service render charts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get Service render charts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "envName",
                        "in": "query"
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.GetSvcRenderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.HelmSvcRenderArg"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/rendersets/globalVariables": {
            "get": {
                "description": "Get global variable from environment, current only used for k8s project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get global variable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "envName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.getGlobalVariablesRespone"
                        }
                    }
                }
            }
        },
        "/api/aslan/environment/rendersets/variables": {
            "get": {
                "description": "Get service variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environment"
                ],
                "summary": "Get service variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "envName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.K8sSvcRenderArg"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/placeholder/apollo_job_spec": {
            "post": {
                "description": "[DONT USE] ApolloJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ApolloJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "apollo_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ApolloJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/blue_green_deploy_v2_jobSpec": {
            "post": {
                "description": "[DONT USE] BlueGreenDeployV2JobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  BlueGreenDeployV2JobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "blue_green_deploy_v2_jobSpec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BlueGreenDeployV2JobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/canary_deploy_job_spec": {
            "post": {
                "description": "[DONT USE] CanaryDeployJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  CanaryDeployJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "canary_deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CanaryDeployJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/custom_deploy_job_spec": {
            "post": {
                "description": "[DONT USE] CustomDeployJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  CustomDeployJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomDeployJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/deploy_job_spec": {
            "post": {
                "description": "[DONT USE] ZadigDeployJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ZadigDeployJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZadigDeployJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/gray_release_job_spec": {
            "post": {
                "description": "[DONT USE] GrayReleaseJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  GrayReleaseJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "gray_release_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GrayReleaseJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/gray_rollback_job_spec": {
            "post": {
                "description": "[DONT USE] GrayRollbackJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  GrayRollbackJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "gray_rollback_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GrayRollbackJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/k8s_patch_job_spec": {
            "post": {
                "description": "[DONT USE] K8sPatchJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  K8sPatchJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.K8sPatchJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/sql_job_task_spec": {
            "post": {
                "description": "[DONT USE] JobTaskSQLSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE] JobTaskSQLSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "sql_task_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.JobTaskSQLSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/update_env_istio_config_job_spec": {
            "post": {
                "description": "[DONT USE] UpdateEnvIstioConfigJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  UpdateEnvIstioConfigJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "update_env_istio_config_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateEnvIstioConfigJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/zadig_build_job_spec": {
            "post": {
                "description": "[DONT USE] ZadigBuildJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ZadigBuildJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZadigBuildJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/zadig_distribute_image_job_spec": {
            "post": {
                "description": "[DONT USE] ZadigDistributeImageJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ZadigDistributeImageJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "zadig_distribute_image_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZadigDistributeImageJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/zadig_helm_chart_deploy_job_spec": {
            "post": {
                "description": "[DONT USE] ZadigHelmChartDeployJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ZadigHelmChartDeployJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZadigHelmChartDeployJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/zadig_scanning_job_spec": {
            "post": {
                "description": "[DONT USE] ZadigScanningJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ZadigScanningJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "zadig_scanning_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZadigScanningJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/placeholder/zadig_vm_deploy_job_spec": {
            "post": {
                "description": "[DONT USE] ZadigVMDeployJobSpec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "placeholder"
                ],
                "summary": "[DONT USE]  ZadigVMDeployJobSpec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "zadig_vm_deploy_job_spec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ZadigVMDeployJobSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/project/bizdir": {
            "get": {
                "description": "Get Bussiness Directory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get Bussiness Directory",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GroupDetail"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/bizdir/search/project": {
            "get": {
                "description": "Bussiness Directory Search By Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Bussiness Directory Search By Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GroupDetail"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/bizdir/search/service": {
            "get": {
                "description": "Bussiness Directory Search By Service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Bussiness Directory Search By Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.SearchBizDirByServiceGroup"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/bizdir/service/detail": {
            "get": {
                "description": "Get Bussiness Directory Searvice Detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get Bussiness Directory Searvice Detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GetBizDirServiceDetailResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/bizdir/services": {
            "get": {
                "description": "Get Bussiness Directory Project Services",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get Bussiness Directory Project Services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/integration/{name}/codehosts": {
            "get": {
                "description": "List Project CodeHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "List Project CodeHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "encrypted key",
                        "name": "encryptedKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CodeHost"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create Project CodeHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Create Project CodeHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CodeHost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/project/integration/{name}/codehosts/available": {
            "get": {
                "description": "List Available CodeHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "List Available CodeHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "encrypted key",
                        "name": "encryptedKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CodeHost"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/integration/{name}/codehosts/{id}": {
            "get": {
                "description": "Get Project CodeHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get Project CodeHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "code host id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CodeHost"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Project CodeHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Delete Project CodeHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "code host id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "patch": {
                "description": "Update Project CodeHost",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Update Project CodeHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "code host id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CodeHost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/project/products/{name}/globalProductionGlobalVariables": {
            "get": {
                "description": "Get global variable candidates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get production_global variable candidates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GetGlobalVariableCandidatesRespone"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/products/{name}/globalVariableCandidates": {
            "get": {
                "description": "Get global variable candidates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get global variable candidates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.GetGlobalVariableCandidatesRespone"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/project/products/{name}/globalVariables": {
            "get": {
                "description": "Get global variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get global variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ServiceVariableKV"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update global variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Update global variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.updateGlobalVariablesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/project/products/{name}/productionGlobalVariables": {
            "get": {
                "description": "Get global variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get global production_variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ServiceVariableKV"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update global variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Update production_global variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.updateGlobalVariablesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/release_plan/v1": {
            "get": {
                "description": "List Release Plans",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "releasePlan"
                ],
                "summary": "List Release Plans",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page num",
                        "name": "pageNum",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "name",
                            "manager",
                            "success_time",
                            "status"
                        ],
                        "type": "string",
                        "description": "search type",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search keyword, 当类型为success_time时，值应为'开始时间戳-结束时间戳'的形式",
                        "name": "keyword",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ListReleasePlanResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/service/services": {
            "post": {
                "description": "Create service template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Create service template",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "is force to create service template",
                        "name": "force",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createServiceTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ServiceOption"
                        }
                    }
                }
            }
        },
        "/api/aslan/service/services/variable/convert": {
            "post": {
                "description": "convert varaible kv and yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "convert varaible kv and yaml",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.ConvertVaraibleKVAndYamlArgs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ConvertVaraibleKVAndYamlArgs"
                        }
                    }
                }
            }
        },
        "/api/aslan/service/services/{name}/environments/deployable": {
            "get": {
                "description": "Get Deployable Envs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get Deployable Envs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeployableEnvResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/service/services/{name}/variable": {
            "put": {
                "description": "Update service varaible",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Update service varaible",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.updateServiceVariableRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/service/template/load": {
            "post": {
                "description": "Load service from yaml template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Load service from yaml template",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.LoadServiceFromYamlTemplateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/service/template/reload": {
            "post": {
                "description": "Reload service from yaml template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Reload service from yaml template",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.LoadServiceFromYamlTemplateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/service/version/{serviceName}": {
            "get": {
                "description": "List Service Versions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "List Service Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.ListServiceVersionsResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/service/version/{serviceName}/diff": {
            "get": {
                "description": "Diff Service Versions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Diff Service Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "revision a",
                        "name": "revisionA",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "revision b",
                        "name": "revisionB",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ListServiceVersionsResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/service/version/{serviceName}/revision/{revision}": {
            "get": {
                "description": "Get Service Versions Yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get Service Version Yaml",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "revision",
                        "name": "revision",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.GetServiceVersionYamlResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/service/version/{serviceName}/rollback": {
            "post": {
                "description": "Rollback Service Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Rollback Service Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "revision",
                        "name": "revision",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "is production",
                        "name": "production",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/system/dbinstance/project": {
            "get": {
                "description": "List DB Instances Info By Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List DB Instances Info By Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DBInstance"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/helm/project": {
            "get": {
                "description": "List Helm Repos By Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Helm Repos By Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.HelmRepo"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/llm/integration": {
            "get": {
                "description": "List llm integrations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List llm integrations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LLMIntegration"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a llm integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Create a llm integration",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateLLMIntegrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/system/llm/integration/check": {
            "get": {
                "description": "Check llm integrations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Check llm integrations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.checkLLMIntegrationResponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/system/llm/integration/{id}": {
            "get": {
                "description": "Get a llm integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get a llm integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LLMIntegration"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a llm integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Update a llm integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateLLMIntegrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "description": "Delete a llm integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Delete a llm integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/system/meego/{id}/projects": {
            "get": {
                "description": "List Meego Projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Meego Projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "meego id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.MeegoProjectResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/system/meego/{id}/projects/{projectID}/work_item": {
            "get": {
                "description": "List Meego Work Items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Meego Work Items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "meego id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type key",
                        "name": "type_key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page num",
                        "name": "page_num",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "item name",
                        "name": "item_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.MeegoWorkItemResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/system/meego/{id}/projects/{projectID}/work_item/types": {
            "get": {
                "description": "Get Meego Work Item Type List",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get Meego Work Item Type List",
                "parameters": [
                    {
                        "type": "string",
                        "description": "meego id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.MeegoWorkItemTypeResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/system/project_management/project": {
            "get": {
                "description": "List Project Management For Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Project Management For Project",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProjectManagement"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/project_management/{id}/jira/board": {
            "get": {
                "description": "List Jira Boards",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Jira Boards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "jira id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "jira project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.JiraBoardResp"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/project_management/{id}/jira/board/:boardID/sprint": {
            "get": {
                "description": "List Jira Sprints",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Jira Sprints",
                "parameters": [
                    {
                        "type": "string",
                        "description": "jira id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "jira board id",
                        "name": "boardID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.JiraSprintResp"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/project_management/{id}/jira/project": {
            "get": {
                "description": "List Jira Projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Jira Projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "jira id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.JiraProjectResp"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/project_management/{id}/jira/sprint/:sprintID": {
            "get": {
                "description": "Get Jira Sprint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get Jira Sprint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "jira id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "jira sprint id",
                        "name": "sprintID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.JiraSprintResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/system/project_management/{id}/jira/sprint/:sprintID/issue": {
            "get": {
                "description": "List Jira Sprint Issues",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Jira Sprint Issues",
                "parameters": [
                    {
                        "type": "string",
                        "description": "jira id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "jira sprint id",
                        "name": "sprintID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.JiraSprintResp"
                        }
                    }
                }
            }
        },
        "/api/aslan/system/registry/project": {
            "get": {
                "description": "List Registries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List Registries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RegistryNamespace"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/s3storage/project": {
            "get": {
                "description": "List S3 Storage By Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "List S3 Storage By Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.S3Storage"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/system/webhook/config": {
            "get": {
                "description": "Get webhook config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get webhook config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.GetWebhookConfigReponse"
                        }
                    }
                }
            }
        },
        "/api/aslan/template/release_plan": {
            "get": {
                "description": "List Release Plan Template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "List Release Plan Template",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ReleasePlanTemplate"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create Release Plan Template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Create Release Plan Template",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReleasePlanTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/template/release_plan/{id}": {
            "get": {
                "description": "Get Release Plan Template by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Get Release Plan Template by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ReleasePlanTemplate"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Release Plan Template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Update Release Plan Template",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReleasePlanTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "description": "Delete Release Plan Template by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Delete Release Plan Template by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/template/yaml": {
            "post": {
                "description": "Create yaml template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Create yaml template",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/template.YamlTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/template/yaml/validateVariable": {
            "post": {
                "description": "Validate template varaibles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Validate template varaibles",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.getYamlTemplateVariablesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/template/yaml/{id}": {
            "get": {
                "description": "Get yaml template detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Get yaml template detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "template id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/template.YamlDetail"
                        }
                    }
                }
            },
            "put": {
                "description": "Update yaml template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Update yaml template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "template id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/template.YamlTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/template/yaml/{id}/variable": {
            "put": {
                "description": "Update yaml template variable",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Update yaml template variable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "template id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/template.YamlTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/webhook/notify/buildJobSpec": {
            "post": {
                "description": "Workflow Webhook Build Job Spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhook"
                ],
                "summary": "Workflow Webhook Notify Build Job Spec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhooknotify.WorkflowNotifyJobTaskBuildSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/webhook/notify/deployJobSpec": {
            "post": {
                "description": "Workflow Webhook Deploy Job Spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhook"
                ],
                "summary": "Workflow Webhook Notify Deploy Job Spec",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhooknotify.WorkflowNotifyJobTaskDeploySpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/webhook/test": {
            "post": {
                "description": "Webhook Notify",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhook"
                ],
                "summary": "Webhook Notify",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhooknotify.WebHookNotify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/workflow/v4/filterEnv": {
            "post": {
                "description": "Get filtered env services",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflow"
                ],
                "summary": "Get filtered env services",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.filterDeployServiceVarsQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DeployService"
                            }
                        }
                    }
                }
            }
        },
        "/api/aslan/workflow/v4/workflowtask/manualexec/workflow/{workflowName}/task/{taskID}": {
            "post": {
                "description": "Manually Execute Workflow Task V4",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflow"
                ],
                "summary": "Manually Execute Workflow Task V4",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "workflow name",
                        "name": "workflowName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "workflow task ID",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "workflow stage name",
                        "name": "stageName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "workflow stage jobs",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workflow.ManualExecWorkflowTaskV4Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/aslan/workflow/v4/yamlComparison": {
            "post": {
                "description": "Compare Helm Service Yaml In Env",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflow"
                ],
                "summary": "Compare Helm Service Yaml In Env",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.getHelmValuesDifferenceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/workflow.GetHelmValuesDifferenceResp"
                        }
                    }
                }
            }
        },
        "/openapi/delivery/releases": {
            "get": {
                "description": "OpenAPI List Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI List Delivery Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page num",
                        "name": "pageNum",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/delivery/releases/helm": {
            "post": {
                "description": "OpenAPI Create Helm Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Create Helm Delivery Version",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPICreateHelmDeliveryVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/delivery/releases/k8s": {
            "post": {
                "description": "OpenAPI Create K8S Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Create K8S Delivery Version",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPICreateK8SDeliveryVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/delivery/releases/{id}": {
            "get": {
                "description": "OpenAPI Get Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Get Delivery Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "description": "OpenAPI Delete Delivery Version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Delete Delivery Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/environments/production/{name}/variable": {
            "put": {
                "description": "OpenAPI Update Production K8S Environment Global Variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Update Production K8S Environment Global Variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPIEnvGlobalVariables"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/environments/{name}/variable": {
            "put": {
                "description": "OpenAPI Update K8S Environment Global Variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Update K8S Environment Global Variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "env name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPIEnvGlobalVariables"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/projects/project/init/yaml": {
            "post": {
                "description": "OpenAPI Initialize Yaml Project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Initialize Yaml Project",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPIInitializeProjectReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/openapi/system/cluster": {
            "post": {
                "description": "OpenAPI Create Cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenAPI"
                ],
                "summary": "OpenAPI Create Cluster",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPICreateClusterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.OpenAPICreateClusterResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.ApprovalType": {
            "type": "string",
            "enum": [
                "native",
                "lark",
                "dingtalk",
                "workwx"
            ],
            "x-enum-varnames": [
                "NativeApproval",
                "LarkApproval",
                "DingTalkApproval",
                "WorkWXApproval"
            ]
        },
        "config.ApproveOrReject": {
            "type": "string",
            "enum": [
                "approve",
                "reject"
            ],
            "x-enum-varnames": [
                "Approve",
                "Reject"
            ]
        },
        "config.CollaborationType": {
            "type": "string",
            "enum": [
                "share",
                "new"
            ],
            "x-enum-varnames": [
                "CollaborationShare",
                "CollaborationNew"
            ]
        },
        "config.CommonEnvCfgType": {
            "type": "string",
            "enum": [
                "Ingress",
                "ConfigMap",
                "Secret",
                "PVC"
            ],
            "x-enum-varnames": [
                "CommonEnvCfgTypeIngress",
                "CommonEnvCfgTypeConfigMap",
                "CommonEnvCfgTypeSecret",
                "CommonEnvCfgTypePvc"
            ]
        },
        "config.DBInstanceType": {
            "type": "string",
            "enum": [
                "mysql",
                "mariadb"
            ],
            "x-enum-varnames": [
                "DBInstanceTypeMySQL",
                "DBInstanceTypeMariaDB"
            ]
        },
        "config.DeployContent": {
            "type": "string",
            "enum": [
                "image",
                "vars",
                "config"
            ],
            "x-enum-varnames": [
                "DeployImage",
                "DeployVars",
                "DeployConfig"
            ]
        },
        "config.DeploySourceType": {
            "type": "string",
            "enum": [
                "runtime",
                "fromjob"
            ],
            "x-enum-varnames": [
                "SourceRuntime",
                "SourceFromJob"
            ]
        },
        "config.JiraAuthType": {
            "type": "string",
            "enum": [
                "password_or_token",
                "personal_access_token"
            ],
            "x-enum-varnames": [
                "JiraBasicAuth",
                "JiraPersonalAccessToken"
            ]
        },
        "config.JobRunPolicy": {
            "type": "string",
            "enum": [
                "",
                "default_not_run",
                "force_run",
                "skip"
            ],
            "x-enum-comments": {
                "DefaultNotRun": "default not run this job",
                "DefaultRun": "default run this job",
                "ForceRun": "force run this job"
            },
            "x-enum-varnames": [
                "DefaultRun",
                "DefaultNotRun",
                "ForceRun",
                "SkipRun"
            ]
        },
        "config.JobType": {
            "type": "string",
            "enum": [
                "build",
                "deploy",
                "zadig-build",
                "zadig-distribute-image",
                "zadig-test",
                "zadig-scanning",
                "custom-deploy",
                "zadig-deploy",
                "zadig-vm-deploy",
                "zadig-helm-deploy",
                "zadig-helm-chart-deploy",
                "freestyle",
                "plugin",
                "k8s-blue-green-deploy",
                "k8s-blue-green-release",
                "k8s-canary-deploy",
                "k8s-canary-release",
                "k8s-gray-release",
                "k8s-gray-rollback",
                "k8s-resource-patch",
                "istio-release",
                "istio-rollback",
                "update-env-istio-config",
                "jira",
                "nacos",
                "apollo",
                "sql",
                "jenkins",
                "meego-transition",
                "workflow-trigger",
                "offline-service",
                "mse-gray-release",
                "mse-gray-offline",
                "guanceyun-check",
                "grafana",
                "blueking",
                "approval"
            ],
            "x-enum-varnames": [
                "JobBuild",
                "JobDeploy",
                "JobZadigBuild",
                "JobZadigDistributeImage",
                "JobZadigTesting",
                "JobZadigScanning",
                "JobCustomDeploy",
                "JobZadigDeploy",
                "JobZadigVMDeploy",
                "JobZadigHelmDeploy",
                "JobZadigHelmChartDeploy",
                "JobFreestyle",
                "JobPlugin",
                "JobK8sBlueGreenDeploy",
                "JobK8sBlueGreenRelease",
                "JobK8sCanaryDeploy",
                "JobK8sCanaryRelease",
                "JobK8sGrayRelease",
                "JobK8sGrayRollback",
                "JobK8sPatch",
                "JobIstioRelease",
                "JobIstioRollback",
                "JobUpdateEnvIstioConfig",
                "JobJira",
                "JobNacos",
                "JobApollo",
                "JobSQL",
                "JobJenkins",
                "JobMeegoTransition",
                "JobWorkflowTrigger",
                "JobOfflineService",
                "JobMseGrayRelease",
                "JobMseGrayOffline",
                "JobGuanceyunCheck",
                "JobGrafana",
                "JobBlueKing",
                "JobApproval"
            ]
        },
        "config.ReleasePlanJobStatus": {
            "type": "string",
            "enum": [
                "todo",
                "done",
                "skipped",
                "failed",
                "running"
            ],
            "x-enum-varnames": [
                "ReleasePlanJobStatusTodo",
                "ReleasePlanJobStatusDone",
                "ReleasePlanJobStatusSkipped",
                "ReleasePlanJobStatusFailed",
                "ReleasePlanJobStatusRunning"
            ]
        },
        "config.ReleasePlanJobType": {
            "type": "string",
            "enum": [
                "text",
                "workflow"
            ],
            "x-enum-varnames": [
                "JobText",
                "JobWorkflow"
            ]
        },
        "config.ReleasePlanStatus": {
            "type": "string",
            "enum": [
                "planning",
                "wait_for_approval",
                "executing",
                "success",
                "cancel"
            ],
            "x-enum-varnames": [
                "StatusPlanning",
                "StatusWaitForApprove",
                "StatusExecuting",
                "StatusSuccess",
                "StatusCancel"
            ]
        },
        "config.ScanningModuleType": {
            "type": "string",
            "enum": [
                "",
                "service_scanning"
            ],
            "x-enum-varnames": [
                "NormalScanningType",
                "ServiceScanningType"
            ]
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_config.PipelineType": {
            "type": "string",
            "enum": [
                "single",
                "workflow",
                "freestyle",
                "test",
                "service",
                "workflow_v3",
                "workflow_v4",
                "artifact",
                "scanning"
            ],
            "x-enum-varnames": [
                "SingleType",
                "WorkflowType",
                "FreestyleType",
                "TestType",
                "ServiceType",
                "WorkflowTypeV3",
                "WorkflowTypeV4",
                "ArtifactType",
                "ScanningType"
            ]
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_config.Status": {
            "type": "string",
            "enum": [
                "disabled",
                "created",
                "running",
                "passed",
                "skipped",
                "failed",
                "timeout",
                "cancelled",
                "pause",
                "waiting",
                "queued",
                "blocked",
                "pending",
                "changed",
                "notRun",
                "prepare",
                "reject",
                "distributed",
                "wait_for_approval",
                "debug_before",
                "debug_after"
            ],
            "x-enum-varnames": [
                "StatusDisabled",
                "StatusCreated",
                "StatusRunning",
                "StatusPassed",
                "StatusSkipped",
                "StatusFailed",
                "StatusTimeout",
                "StatusCancelled",
                "StatusPause",
                "StatusWaiting",
                "StatusQueued",
                "StatusBlocked",
                "QueueItemPending",
                "StatusChanged",
                "StatusNotRun",
                "StatusPrepare",
                "StatusReject",
                "StatusDistributed",
                "StatusWaitingApprove",
                "StatusDebugBefore",
                "StatusDebugAfter"
            ]
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_core_common_service.EnvService": {
            "type": "object",
            "properties": {
                "deployed": {
                    "type": "boolean"
                },
                "latest_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "latest_variable_yaml": {
                    "type": "string"
                },
                "service_modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_core_delivery_service.ImageData": {
            "type": "object",
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "imageName": {
                    "type": "string"
                },
                "imageTag": {
                    "type": "string"
                },
                "selected": {
                    "type": "boolean"
                }
            }
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_core_environment_service.ProductResp": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "cluster_name": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "is_existed": {
                    "type": "boolean"
                },
                "is_local": {
                    "type": "boolean"
                },
                "is_prod": {
                    "type": "boolean"
                },
                "istio_grayscale_base_env": {
                    "type": "string"
                },
                "istio_grayscale_enable": {
                    "type": "boolean"
                },
                "istio_grayscale_is_base": {
                    "type": "boolean"
                },
                "namespace": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "recycle_day": {
                    "type": "integer"
                },
                "registry_id": {
                    "type": "string"
                },
                "related_envs": {
                    "description": "New Since v2.1.0",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.SharedNSEnvs"
                    }
                },
                "render": {
                    "$ref": "#/definitions/models.RenderInfo"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/models.ProductService"
                        }
                    }
                },
                "share_env_base_env": {
                    "type": "string"
                },
                "share_env_enable": {
                    "description": "New Since v1.11.0",
                    "type": "boolean"
                },
                "share_env_is_base": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "update_by": {
                    "type": "string"
                },
                "update_time": {
                    "type": "integer"
                },
                "vars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template.RenderKV"
                    }
                },
                "yaml_data": {
                    "description": "used for cron service",
                    "allOf": [
                        {
                            "$ref": "#/definitions/template.CustomYaml"
                        }
                    ]
                }
            }
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_core_service_service.ServiceModule": {
            "type": "object",
            "properties": {
                "build_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "imagePath": {
                    "$ref": "#/definitions/models.ImagePathSpec"
                },
                "image_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_koderover_zadig_v2_pkg_microservice_aslan_core_service_service.Variable": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "handler.CreateLLMIntegrationRequest": {
            "type": "object",
            "properties": {
                "base_url": {
                    "type": "string"
                },
                "enable_proxy": {
                    "type": "boolean"
                },
                "provider_name": {
                    "$ref": "#/definitions/llm.Provider"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "handler.DeleteProductServicesRequest": {
            "type": "object",
            "properties": {
                "service_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.FetchServiceYamlResponse": {
            "type": "object",
            "properties": {
                "yaml": {
                    "type": "string"
                }
            }
        },
        "handler.ModuleAndImage": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.checkLLMIntegrationResponse": {
            "type": "object",
            "properties": {
                "check": {
                    "type": "boolean"
                }
            }
        },
        "handler.createServiceTemplateRequest": {
            "type": "object",
            "required": [
                "product_name",
                "service_name",
                "source",
                "type",
                "visibility",
                "yaml"
            ],
            "properties": {
                "product_name": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "service_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "variable_yaml": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "handler.filterDeployServiceVarsQuery": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "job_name": {
                    "type": "string"
                },
                "service_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflow_name": {
                    "type": "string"
                }
            }
        },
        "handler.getGlobalVariablesRespone": {
            "type": "object",
            "properties": {
                "global_variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalVariableKV"
                    }
                },
                "revision": {
                    "type": "integer"
                }
            }
        },
        "handler.getHelmValuesDifferenceReq": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "is_helm_chart_deploy": {
                    "type": "boolean"
                },
                "production": {
                    "type": "boolean"
                },
                "service_modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.ModuleAndImage"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "update_service_revision": {
                    "type": "boolean"
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "handler.getInitProductResponse": {
            "type": "object",
            "properties": {
                "chart_infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template.ServiceRender"
                    }
                },
                "create_time": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "render": {
                    "$ref": "#/definitions/models.RenderInfo"
                },
                "revision": {
                    "type": "integer"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/models.ProductService"
                        }
                    }
                },
                "source": {
                    "type": "string"
                },
                "update_by": {
                    "type": "string"
                }
            }
        },
        "handler.getYamlTemplateVariablesReq": {
            "type": "object",
            "required": [
                "content",
                "variable_yaml"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "handler.updateGlobalVariablesRequest": {
            "type": "object",
            "properties": {
                "global_variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                }
            }
        },
        "handler.updateK8sProductGlobalVariablesRequest": {
            "type": "object",
            "properties": {
                "current_revision": {
                    "type": "integer"
                },
                "global_variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalVariableKV"
                    }
                }
            }
        },
        "handler.updateServiceVariableRequest": {
            "type": "object",
            "required": [
                "service_variable_kvs",
                "variable_yaml"
            ],
            "properties": {
                "service_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "kube.SetIstioGrayscaleConfigRequest": {
            "type": "object",
            "properties": {
                "grayscale_strategy": {
                    "type": "string"
                },
                "header_match_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioHeaderMatchConfig"
                    }
                },
                "weight_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioWeightConfig"
                    }
                }
            }
        },
        "lark.ApproveType": {
            "type": "string",
            "enum": [
                "AND",
                "OR",
                "SEQUENTIAL"
            ],
            "x-enum-varnames": [
                "ApproveTypeAnd",
                "ApproveTypeOr",
                "ApproveTypeSequential"
            ]
        },
        "llm.Provider": {
            "type": "string",
            "enum": [
                "openai",
                "azure_openai",
                "azure_ad_openai"
            ],
            "x-enum-varnames": [
                "ProviderOpenAI",
                "ProviderAzure",
                "ProviderAzureAD"
            ]
        },
        "models.AnalysisConfig": {
            "type": "object",
            "properties": {
                "resource_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ResourceType"
                    }
                }
            }
        },
        "models.ApolloJobSpec": {
            "type": "object",
            "properties": {
                "apolloID": {
                    "type": "string"
                },
                "namespaceList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ApolloNamespace"
                    }
                },
                "namespaceListOption": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ApolloNamespace"
                    }
                }
            }
        },
        "models.ApolloKV": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "val": {
                    "type": "string"
                }
            }
        },
        "models.ApolloNamespace": {
            "type": "object",
            "properties": {
                "appID": {
                    "type": "string"
                },
                "clusterID": {
                    "type": "string"
                },
                "env": {
                    "type": "string"
                },
                "kv": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ApolloKV"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "original_config": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ApolloKV"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.Approval": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "dingtalk_approval": {
                    "$ref": "#/definitions/models.DingTalkApproval"
                },
                "enabled": {
                    "type": "boolean"
                },
                "end_time": {
                    "type": "integer"
                },
                "lark_approval": {
                    "$ref": "#/definitions/models.LarkApproval"
                },
                "native_approval": {
                    "$ref": "#/definitions/models.NativeApproval"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_config.Status"
                },
                "type": {
                    "$ref": "#/definitions/config.ApprovalType"
                },
                "workwx_approval": {
                    "$ref": "#/definitions/models.WorkWXApproval"
                }
            }
        },
        "models.BlueGreenDeployV2JobSpec": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "env_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ZadigBlueGreenDeployEnvInformation"
                    }
                },
                "production": {
                    "type": "boolean"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BlueGreenDeployV2Service"
                    }
                },
                "source": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.BlueGreenDeployV2Service": {
            "type": "object",
            "properties": {
                "blue_deployment_name": {
                    "type": "string"
                },
                "blue_deployment_yaml": {
                    "type": "string"
                },
                "blue_service_name": {
                    "type": "string"
                },
                "blue_service_yaml": {
                    "type": "string"
                },
                "green_deployment_name": {
                    "type": "string"
                },
                "green_service_name": {
                    "type": "string"
                },
                "service_and_image": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BlueGreenDeployV2ServiceModuleAndImage"
                    }
                },
                "service_name": {
                    "description": "ServiceName is zadig service name",
                    "type": "string"
                }
            }
        },
        "models.BlueGreenDeployV2ServiceModuleAndImage": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "image_name": {
                    "description": "Following fields only save for frontend",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the service module name for the sake of old data.",
                    "type": "string"
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.CanaryDeployJobSpec": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "docker_registry_id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "target_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CanaryTarget"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CanaryTarget"
                    }
                }
            }
        },
        "models.CanaryTarget": {
            "type": "object",
            "properties": {
                "canary_percentage": {
                    "type": "integer"
                },
                "container_name": {
                    "type": "string"
                },
                "deploy_timeout": {
                    "description": "unit is minute.",
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "k8s_service_name": {
                    "type": "string"
                },
                "workload_name": {
                    "type": "string"
                },
                "workload_type": {
                    "type": "string"
                }
            }
        },
        "models.CodeHost": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "alias": {
                    "type": "string"
                },
                "application_id": {
                    "type": "string"
                },
                "auth_type": {
                    "$ref": "#/definitions/types.AuthType"
                },
                "client_secret": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "enable_proxy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "integration_level": {
                    "$ref": "#/definitions/setting.IntegrationLevel"
                },
                "is_ready": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "private_access_token": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "ssh_key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Commit": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "sha": {
                    "type": "string"
                }
            }
        },
        "models.Container": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "imagePath": {
                    "$ref": "#/definitions/models.ImagePathSpec"
                },
                "image_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.CreateUpdateCommonEnvCfgArgs": {
            "type": "object",
            "properties": {
                "auto_sync": {
                    "type": "boolean"
                },
                "common_env_cfg_type": {
                    "$ref": "#/definitions/config.CommonEnvCfgType"
                },
                "env_name": {
                    "type": "string"
                },
                "git_repo_config": {
                    "$ref": "#/definitions/template.GitRepoConfig"
                },
                "name": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "restart_associated_svc": {
                    "type": "boolean"
                },
                "service_name": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "yaml_data": {
                    "type": "string"
                }
            }
        },
        "models.CustomDeployJobSpec": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "docker_registry_id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "skip_check_run_status": {
                    "type": "boolean"
                },
                "source": {
                    "description": "support two sources, runtime/fixed.",
                    "type": "string"
                },
                "target_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployTargets"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployTargets"
                    }
                },
                "timeout": {
                    "description": "unit is minute.",
                    "type": "integer"
                }
            }
        },
        "models.DBInstance": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/config.DBInstanceType"
                },
                "update_by": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.DeployHelmChart": {
            "type": "object",
            "properties": {
                "chart_name": {
                    "type": "string"
                },
                "chart_repo": {
                    "type": "string"
                },
                "chart_version": {
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "values_yaml": {
                    "type": "string"
                }
            }
        },
        "models.DeployModuleInfo": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                },
                "service_module": {
                    "type": "string"
                }
            }
        },
        "models.DeployService": {
            "type": "object",
            "properties": {
                "key_vals": {
                    "description": "KeyVals Deprecated since 1.18",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceKeyVal"
                    }
                },
                "latest_key_vals": {
                    "description": "LatestKeyVals Deprecated since 1.18",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceKeyVal"
                    }
                },
                "latest_variable_kvs": {
                    "description": "LatestVariableKVs added since 1.18",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "update_config": {
                    "type": "boolean"
                },
                "variable_configs": {
                    "description": "VariableConfigs added since 1.18",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployVariableConfig"
                    }
                },
                "variable_kvs": {
                    "description": "VariableKVs added since 1.18",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "description": "VariableYaml added since 1.18, used for helm production environments",
                    "type": "string"
                }
            }
        },
        "models.DeployServiceInfo": {
            "type": "object",
            "properties": {
                "deployed": {
                    "type": "boolean"
                },
                "key_vals": {
                    "description": "Deprecated since 1.18",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceKeyVal"
                    }
                },
                "latest_key_vals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceKeyVal"
                    }
                },
                "latest_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployModuleInfo"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "update_config": {
                    "type": "boolean"
                },
                "variable_configs": {
                    "description": "VariableConfigs used to determine if a variable is visible to the workflow user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployVariableConfig"
                    }
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "models.DeployTargets": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                },
                "target": {
                    "description": "workload_type/workload_name/container_name.",
                    "type": "string"
                }
            }
        },
        "models.DeployVariableConfig": {
            "type": "object",
            "properties": {
                "use_global_variable": {
                    "type": "boolean"
                },
                "variable_key": {
                    "type": "string"
                }
            }
        },
        "models.DingTalkApproval": {
            "type": "object",
            "properties": {
                "approval_id": {
                    "description": "ID: dintalk im app mongodb id",
                    "type": "string"
                },
                "approval_nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DingTalkApprovalNode"
                    }
                },
                "default_approval_initiator": {
                    "description": "DefaultApprovalInitiator if not set, use workflow task creator as approval initiator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DingTalkApprovalUser"
                        }
                    ]
                },
                "instance_code": {
                    "description": "InstanceCode: dingtalk approval instance code",
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "models.DingTalkApprovalNode": {
            "type": "object",
            "properties": {
                "approve_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DingTalkApprovalUser"
                    }
                },
                "reject_or_approve": {
                    "$ref": "#/definitions/config.ApproveOrReject"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.DingTalkApprovalUser": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operation_time": {
                    "type": "integer"
                },
                "reject_or_approve": {
                    "$ref": "#/definitions/config.ApproveOrReject"
                }
            }
        },
        "models.DistributeTarget": {
            "type": "object",
            "properties": {
                "image_name": {
                    "type": "string"
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "source_image": {
                    "type": "string"
                },
                "source_tag": {
                    "type": "string"
                },
                "target_image": {
                    "type": "string"
                },
                "target_tag": {
                    "type": "string"
                },
                "update_tag": {
                    "description": "if UpdateTag was false, use SourceTag as TargetTag.",
                    "type": "boolean"
                }
            }
        },
        "models.EnvConfig": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "host_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.EnvStatus": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "host_id": {
                    "type": "string"
                },
                "pm_info": {
                    "$ref": "#/definitions/models.PmInfo"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.GUIConfig": {
            "type": "object",
            "properties": {
                "deployment": {},
                "ingress": {},
                "service": {}
            }
        },
        "models.GrayReleaseJobSpec": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "deploy_timeout": {
                    "description": "unit is minute.",
                    "type": "integer"
                },
                "docker_registry_id": {
                    "type": "string"
                },
                "from_job": {
                    "type": "string"
                },
                "gray_scale": {
                    "type": "integer"
                },
                "namespace": {
                    "type": "string"
                },
                "target_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GrayReleaseTarget"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GrayReleaseTarget"
                    }
                }
            }
        },
        "models.GrayReleaseTarget": {
            "type": "object",
            "properties": {
                "container_name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "replica": {
                    "type": "integer"
                },
                "workload_name": {
                    "type": "string"
                },
                "workload_type": {
                    "type": "string"
                }
            }
        },
        "models.GrayRollbackJobSpec": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "rollback_timeout": {
                    "description": "unit is minute.",
                    "type": "integer"
                },
                "target_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GrayRollbackTarget"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GrayRollbackTarget"
                    }
                }
            }
        },
        "models.GrayRollbackTarget": {
            "type": "object",
            "properties": {
                "origin_image": {
                    "type": "string"
                },
                "origin_replica": {
                    "type": "integer"
                },
                "workload_name": {
                    "type": "string"
                },
                "workload_type": {
                    "type": "string"
                }
            }
        },
        "models.HelmChart": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "values_yaml": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.HelmRepo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repo_name": {
                    "type": "string"
                },
                "update_by": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.ImagePathSpec": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "models.IstioGrayscale": {
            "type": "object",
            "properties": {
                "base_env": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "grayscale_strategy": {
                    "type": "string"
                },
                "header_match_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioHeaderMatchConfig"
                    }
                },
                "is_base": {
                    "type": "boolean"
                },
                "weight_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioWeightConfig"
                    }
                }
            }
        },
        "models.IstioHeaderMatch": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.IstioHeaderMatchConfig": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "header_match": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioHeaderMatch"
                    }
                }
            }
        },
        "models.IstioWeightConfig": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "models.Job": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "run_policy": {
                    "$ref": "#/definitions/config.JobRunPolicy"
                },
                "service_modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.WorkflowServiceModule"
                    }
                },
                "skipped": {
                    "description": "only for webhook workflow args to skip some tasks.",
                    "type": "boolean"
                },
                "spec": {},
                "type": {
                    "$ref": "#/definitions/config.JobType"
                }
            }
        },
        "models.JobTaskSQLSpec": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SQLExecResult"
                    }
                },
                "sql": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/config.DBInstanceType"
                }
            }
        },
        "models.K8sPatchJobSpec": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "patch_item_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PatchItem"
                    }
                },
                "patch_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PatchItem"
                    }
                }
            }
        },
        "models.KeyVal": {
            "type": "object",
            "properties": {
                "choice_option": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_credential": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.ParameterSettingType"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.LLMIntegration": {
            "type": "object",
            "properties": {
                "base_url": {
                    "type": "string"
                },
                "enable_proxy": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "provider_name": {
                    "$ref": "#/definitions/llm.Provider"
                },
                "token": {
                    "type": "string"
                },
                "update_time": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "models.LarkApproval": {
            "type": "object",
            "properties": {
                "approval_id": {
                    "description": "ID: lark im app mongodb id",
                    "type": "string"
                },
                "approval_nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LarkApprovalNode"
                    }
                },
                "approve_users": {
                    "description": "Deprecated: use ApprovalNodes instead",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LarkApprovalUser"
                    }
                },
                "default_approval_initiator": {
                    "description": "DefaultApprovalInitiator if not set, use workflow task creator as approval initiator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.LarkApprovalUser"
                        }
                    ]
                },
                "instance_code": {
                    "description": "InstanceCode: lark approval instance code",
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "models.LarkApprovalNode": {
            "type": "object",
            "properties": {
                "approve_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LarkApprovalUser"
                    }
                },
                "reject_or_approve": {
                    "$ref": "#/definitions/config.ApproveOrReject"
                },
                "type": {
                    "$ref": "#/definitions/lark.ApproveType"
                }
            }
        },
        "models.LarkApprovalUser": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operation_time": {
                    "type": "integer"
                },
                "reject_or_approve": {
                    "$ref": "#/definitions/config.ApproveOrReject"
                }
            }
        },
        "models.NativeApproval": {
            "type": "object",
            "properties": {
                "approve_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "flat_approve_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "instance_code": {
                    "description": "InstanceCode: native approval instance code, save for working after restart aslan",
                    "type": "string"
                },
                "needed_approvers": {
                    "type": "integer"
                },
                "reject_or_approve": {
                    "$ref": "#/definitions/config.ApproveOrReject"
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "models.NotificationConfig": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NotificationEvent"
                    }
                },
                "webhook_type": {
                    "$ref": "#/definitions/models.WebHookType"
                },
                "webhook_url": {
                    "type": "string"
                }
            }
        },
        "models.NotificationEvent": {
            "type": "string",
            "enum": [
                "notification_event_analyzer_normal",
                "notification_event_analyzer_abnormal"
            ],
            "x-enum-varnames": [
                "NotificationEventAnalyzerNoraml",
                "NotificationEventAnalyzerAbnormal"
            ]
        },
        "models.Param": {
            "type": "object",
            "properties": {
                "choice_option": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_credential": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "repo": {
                    "$ref": "#/definitions/types.Repository"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "description": "support string/text/choice/repo type",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.ParameterSettingType": {
            "type": "string",
            "enum": [
                "string",
                "choice",
                "external"
            ],
            "x-enum-varnames": [
                "StringType",
                "ChoiceType",
                "ExternalType"
            ]
        },
        "models.PatchItem": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Param"
                    }
                },
                "patch_content": {
                    "type": "string"
                },
                "patch_strategy": {
                    "description": "support strategic-merge/merge/json",
                    "type": "string"
                },
                "resource_group": {
                    "type": "string"
                },
                "resource_kind": {
                    "type": "string"
                },
                "resource_name": {
                    "type": "string"
                },
                "resource_version": {
                    "type": "string"
                }
            }
        },
        "models.PmHealthCheck": {
            "type": "object",
            "properties": {
                "current_healthy_num": {
                    "type": "integer"
                },
                "current_unhealthy_num": {
                    "type": "integer"
                },
                "healthy_threshold": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "time_out": {
                    "type": "integer"
                },
                "unhealthy_threshold": {
                    "type": "integer"
                }
            }
        },
        "models.PmInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "is_prod": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "provider": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/setting.PMHostStatus"
                }
            }
        },
        "models.ProductService": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "deploy_strategy": {
                    "type": "string"
                },
                "env_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EnvConfig"
                    }
                },
                "error": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "render": {
                    "description": "New since 1.9.0 used to replace service renders in render_set",
                    "allOf": [
                        {
                            "$ref": "#/definitions/template.ServiceRender"
                        }
                    ]
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceResource"
                    }
                },
                "revision": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "update_time": {
                    "type": "integer"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "models.ProductShareEnv": {
            "type": "object",
            "properties": {
                "base_env": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "is_base": {
                    "type": "boolean"
                }
            }
        },
        "models.ProjectDetail": {
            "type": "object",
            "properties": {
                "project_deploy_type": {
                    "type": "string"
                },
                "project_key": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                }
            }
        },
        "models.ProjectManagement": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "jira_auth_type": {
                    "$ref": "#/definitions/config.JiraAuthType"
                },
                "jira_host": {
                    "type": "string"
                },
                "jira_personal_access_token": {
                    "description": "JiraPersonalAccessToken is used for bearer token",
                    "type": "string"
                },
                "jira_token": {
                    "description": "JiraToken is used in place of password for basic auth with username",
                    "type": "string"
                },
                "jira_user": {
                    "type": "string"
                },
                "meego_host": {
                    "type": "string"
                },
                "meego_plugin_id": {
                    "type": "string"
                },
                "meego_plugin_secret": {
                    "type": "string"
                },
                "meego_user_key": {
                    "type": "string"
                },
                "system_identity": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                }
            }
        },
        "models.RegistryAdvancedSetting": {
            "type": "object",
            "properties": {
                "enable_tls": {
                    "description": "New field since v1.11 to support self-signed TLS certificate",
                    "type": "boolean"
                },
                "modified": {
                    "description": "indicator to make sure if the advanced has been modified\nThis is solely a field for frontend display and not used anywhere else in the backend system\nTODO: whether this field should exist needs a discussion",
                    "type": "boolean"
                },
                "tls_cert": {
                    "type": "string"
                }
            }
        },
        "models.RegistryNamespace": {
            "type": "object",
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "advanced_setting": {
                    "$ref": "#/definitions/models.RegistryAdvancedSetting"
                },
                "id": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "namespace": {
                    "description": "Namespace is NOT a required field, this could be empty when the registry is AWS ECR or so.\nuse with CAUTION !!!!",
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "reg_addr": {
                    "type": "string"
                },
                "reg_provider": {
                    "type": "string"
                },
                "reg_type": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "update_by": {
                    "type": "string"
                },
                "update_time": {
                    "type": "integer"
                }
            }
        },
        "models.ReleaseJob": {
            "type": "object",
            "properties": {
                "executed_by": {
                    "type": "string"
                },
                "executed_time": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_status": {
                    "description": "ReleasePlan can return to PlanningStatus when some release jobs have been executed\nSo we need to record the last status of the release job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.ReleasePlanJobStatus"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "spec": {},
                "status": {
                    "$ref": "#/definitions/config.ReleasePlanJobStatus"
                },
                "type": {
                    "$ref": "#/definitions/config.ReleasePlanJobType"
                },
                "updated": {
                    "description": "Updated is used to indicate whether the release job has been updated",
                    "type": "boolean"
                }
            }
        },
        "models.ReleasePlan": {
            "type": "object",
            "properties": {
                "approval": {
                    "$ref": "#/definitions/models.Approval"
                },
                "approval_time": {
                    "type": "integer"
                },
                "create_time": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "executing_time": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "jira_sprint_association": {
                    "$ref": "#/definitions/models.ReleasePlanJiraSprintAssociation"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ReleaseJob"
                    }
                },
                "manager": {
                    "type": "string"
                },
                "manager_id": {
                    "description": "ManagerID is the user id of the manager",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "planning_time": {
                    "type": "integer"
                },
                "schedule_execute_time": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/config.ReleasePlanStatus"
                },
                "success_time": {
                    "type": "integer"
                },
                "update_time": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "models.ReleasePlanJiraSprint": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "integer"
                },
                "project_key": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "sprint_id": {
                    "type": "integer"
                }
            }
        },
        "models.ReleasePlanJiraSprintAssociation": {
            "type": "object",
            "properties": {
                "jira_id": {
                    "type": "string"
                },
                "sprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ReleasePlanJiraSprint"
                    }
                }
            }
        },
        "models.ReleasePlanTemplate": {
            "type": "object",
            "properties": {
                "approval": {
                    "$ref": "#/definitions/models.Approval"
                },
                "create_time": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ReleaseJob"
                    }
                },
                "template_name": {
                    "type": "string"
                },
                "update_time": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "models.RenderInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "product_tmpl": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                }
            }
        },
        "models.ResourceType": {
            "type": "string",
            "enum": [
                "Pod",
                "Deployment",
                "ReplicaSet",
                "PersistentVolumeClaim",
                "Service",
                "Ingress",
                "StatefulSet",
                "CronJob",
                "HorizontalPodAutoScaler",
                "PodDisruptionBudget",
                "NetworkPolicy"
            ],
            "x-enum-varnames": [
                "ResourceTypePod",
                "ResourceTypeDeployment",
                "ResourceTypeReplicaSet",
                "ResourceTypePVC",
                "ResourceTypeService",
                "ResourceTypeIngress",
                "ResourceTypeStatefulSet",
                "ResourceTypeCronJob",
                "ResourceTypeHPA",
                "ResourceTypePDB",
                "ResourceTypeNetworkPolicy"
            ]
        },
        "models.S3Storage": {
            "type": "object",
            "properties": {
                "ak": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "insecure": {
                    "type": "boolean"
                },
                "is_default": {
                    "type": "boolean"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "sk": {
                    "type": "string"
                },
                "subfolder": {
                    "type": "string"
                },
                "update_time": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "models.SQLExecResult": {
            "type": "object",
            "properties": {
                "elapsed_time": {
                    "type": "integer"
                },
                "rows_affected": {
                    "type": "integer"
                },
                "sql": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/setting.SQLExecStatus"
                }
            }
        },
        "models.ScanningModule": {
            "type": "object",
            "properties": {
                "key_vals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyVal"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Repository"
                    }
                },
                "share_storage_info": {
                    "$ref": "#/definitions/models.ShareStorageInfo"
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "auto_sync": {
                    "type": "boolean"
                },
                "branch_name": {
                    "type": "string"
                },
                "build_name": {
                    "type": "string"
                },
                "codehost_id": {
                    "type": "integer"
                },
                "commit": {
                    "$ref": "#/definitions/models.Commit"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "create_by": {
                    "type": "string"
                },
                "create_from": {},
                "create_time": {
                    "type": "integer"
                },
                "deploy_time": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "env_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EnvConfig"
                    }
                },
                "env_name": {
                    "type": "string"
                },
                "env_statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EnvStatus"
                    }
                },
                "gerrit_branch_name": {
                    "type": "string"
                },
                "gerrit_codeHost_id": {
                    "type": "integer"
                },
                "gerrit_path": {
                    "type": "string"
                },
                "gerrit_remote_name": {
                    "type": "string"
                },
                "gerrit_repo_name": {
                    "type": "string"
                },
                "gitee_path": {
                    "type": "string"
                },
                "gui_config": {
                    "$ref": "#/definitions/models.GUIConfig"
                },
                "hash256": {
                    "type": "string"
                },
                "health_checks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PmHealthCheck"
                    }
                },
                "helm_chart": {
                    "$ref": "#/definitions/models.HelmChart"
                },
                "is_dir": {
                    "type": "boolean"
                },
                "load_path": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "release_naming": {
                    "type": "string"
                },
                "repo_name": {
                    "type": "string"
                },
                "repo_namespace": {
                    "type": "string"
                },
                "repo_owner": {
                    "type": "string"
                },
                "repo_uuid": {
                    "type": "string"
                },
                "restart_cmd": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "service_variable_kvs": {
                    "description": "New since 1.18.0, stores the variable kvs of k8s services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "service_vars": {
                    "description": "DEPRECATED, New since 1.16.0, stores keys in variables which can be set in env",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "type": "string"
                },
                "src_path": {
                    "type": "string"
                },
                "start_cmd": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "stop_cmd": {
                    "type": "string"
                },
                "team": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "variable_yaml": {
                    "description": "New since 1.16.0, stores the variable yaml of k8s services",
                    "type": "string"
                },
                "visibility": {
                    "description": "DEPRECATED since 1.17.0",
                    "type": "string"
                },
                "workload_type": {
                    "description": "WorkloadType is set in host projects",
                    "type": "string"
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "models.ServiceAndBuild": {
            "type": "object",
            "properties": {
                "build_name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                },
                "key_vals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyVal"
                    }
                },
                "package": {
                    "type": "string"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Repository"
                    }
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "share_storage_info": {
                    "$ref": "#/definitions/models.ShareStorageInfo"
                }
            }
        },
        "models.ServiceAndImage": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "models.ServiceAndScannings": {
            "type": "object",
            "properties": {
                "key_vals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyVal"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Repository"
                    }
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "share_storage_info": {
                    "$ref": "#/definitions/models.ShareStorageInfo"
                }
            }
        },
        "models.ServiceAndVMDeploy": {
            "type": "object",
            "properties": {
                "artifact_url": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "job_task_name": {
                    "type": "string"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Repository"
                    }
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "task_id": {
                    "type": "integer"
                },
                "workflow_name": {
                    "type": "string"
                },
                "workflow_type": {
                    "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_config.PipelineType"
                }
            }
        },
        "models.ServiceKeyVal": {
            "type": "object",
            "properties": {
                "choice_option": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_credential": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.ParameterSettingType"
                },
                "value": {}
            }
        },
        "models.ServiceResource": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.ServiceTestTarget": {
            "type": "object",
            "properties": {
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "models.ShareStorage": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "models.ShareStorageInfo": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "share_storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ShareStorage"
                    }
                }
            }
        },
        "models.UpdateEnvIstioConfigJobSpec": {
            "type": "object",
            "properties": {
                "base_env": {
                    "type": "string"
                },
                "grayscale_strategy": {
                    "type": "string"
                },
                "header_match_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioHeaderMatchConfig"
                    }
                },
                "production": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "weight_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IstioWeightConfig"
                    }
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "operation_time": {
                    "type": "integer"
                },
                "reject_or_approve": {
                    "$ref": "#/definitions/config.ApproveOrReject"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "models.WebHookType": {
            "type": "string",
            "enum": [
                "feishu",
                "dingding",
                "wechat"
            ],
            "x-enum-varnames": [
                "WebHookTypeFeishu",
                "WebHookTypeDingding",
                "WebHookTypeWeChat"
            ]
        },
        "models.WorkWXApproval": {
            "type": "object",
            "properties": {
                "approval_id": {
                    "description": "ID: workwx im app mongodb id",
                    "type": "string"
                },
                "approval_node_details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workwx.ApprovalNode"
                    }
                },
                "approval_nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workwx.ApprovalNode"
                    }
                },
                "creator_user": {
                    "$ref": "#/definitions/workwx.ApprovalUser"
                },
                "instance_id": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "models.WorkflowServiceModule": {
            "type": "object",
            "properties": {
                "code_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Repository"
                    }
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "models.ZadigBlueGreenDeployEnvInformation": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "registry_id": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BlueGreenDeployV2Service"
                    }
                }
            }
        },
        "models.ZadigBuildJobSpec": {
            "type": "object",
            "properties": {
                "docker_registry_id": {
                    "type": "string"
                },
                "service_and_builds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAndBuild"
                    }
                },
                "service_and_builds_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAndBuild"
                    }
                }
            }
        },
        "models.ZadigDeployEnvInformation": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "registry_id": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployServiceInfo"
                    }
                }
            }
        },
        "models.ZadigDeployJobSpec": {
            "type": "object",
            "properties": {
                "deploy_contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/config.DeployContent"
                    }
                },
                "deploy_type": {
                    "type": "string"
                },
                "env": {
                    "type": "string"
                },
                "env_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ZadigDeployEnvInformation"
                    }
                },
                "job_name": {
                    "description": "当 source 为 fromjob 时需要，指定部署镜像来源是上游哪一个构建任务",
                    "type": "string"
                },
                "origin_job_name": {
                    "description": "save the origin quoted job name",
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "service_and_images": {
                    "description": "TODO: Deprecated in 2.3.0, this field is now used for saving the default service module info for deployment.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAndImage"
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployServiceInfo"
                    }
                },
                "skip_check_run_status": {
                    "type": "boolean"
                },
                "source": {
                    "description": "fromjob/runtime, runtime 表示运行时输入，fromjob 表示从上游构建任务中获取",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.DeploySourceType"
                        }
                    ]
                }
            }
        },
        "models.ZadigDistributeImageJobSpec": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "enable_target_image_tag_rule": {
                    "type": "boolean"
                },
                "job_name": {
                    "description": "required when source is `fromjob`, specify which upstream build job the distribution image source is",
                    "type": "string"
                },
                "source": {
                    "description": "fromjob/runtime, `runtime` means runtime input, `fromjob` means that it is obtained from the upstream build job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.DeploySourceType"
                        }
                    ]
                },
                "source_registry_id": {
                    "description": "not required when source is fromjob, directly obtained from upstream build job information",
                    "type": "string"
                },
                "strategy_id": {
                    "type": "string"
                },
                "target_image_tag_rule": {
                    "type": "string"
                },
                "target_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DistributeTarget"
                    }
                },
                "target_registry_id": {
                    "type": "string"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DistributeTarget"
                    }
                },
                "timeout": {
                    "description": "unit is minute.",
                    "type": "integer"
                }
            }
        },
        "models.ZadigHelmChartDeployJobSpec": {
            "type": "object",
            "properties": {
                "deploy_helm_charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployHelmChart"
                    }
                },
                "env": {
                    "type": "string"
                },
                "env_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ZadigHelmDeployEnvInformation"
                    }
                },
                "env_source": {
                    "type": "string"
                },
                "skip_check_run_status": {
                    "type": "boolean"
                }
            }
        },
        "models.ZadigHelmDeployEnvInformation": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeployHelmChart"
                    }
                }
            }
        },
        "models.ZadigScanningJobSpec": {
            "type": "object",
            "properties": {
                "job_name": {
                    "type": "string"
                },
                "origin_job_name": {
                    "type": "string"
                },
                "scanning_type": {
                    "$ref": "#/definitions/config.ScanningModuleType"
                },
                "scannings": {
                    "description": "Scannings used only for normal scanning. for service scanning we use",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScanningModule"
                    }
                },
                "service_and_scannings": {
                    "description": "ServiceAndScannings is the configured field for this job. It includes all the services along with its configured scanning.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAndScannings"
                    }
                },
                "source": {
                    "$ref": "#/definitions/config.DeploySourceType"
                },
                "target_services": {
                    "description": "selected service in service scanning",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceTestTarget"
                    }
                }
            }
        },
        "models.ZadigVMDeployEnvInformation": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAndVMDeploy"
                    }
                }
            }
        },
        "models.ZadigVMDeployJobSpec": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "env_options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ZadigVMDeployEnvInformation"
                    }
                },
                "job_name": {
                    "description": "当 source 为 fromjob 时需要，指定部署镜像来源是上游哪一个构建任务",
                    "type": "string"
                },
                "origin_job_name": {
                    "description": "save the origin quoted job name",
                    "type": "string"
                },
                "s3_storage_id": {
                    "type": "string"
                },
                "service_and_vm_deploys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAndVMDeploy"
                    }
                },
                "source": {
                    "description": "fromjob/runtime, runtime 表示运行时输入，fromjob 表示从上游构建任务中获取",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.DeploySourceType"
                        }
                    ]
                }
            }
        },
        "resource.Backend": {
            "type": "object",
            "properties": {
                "service_name": {
                    "type": "string"
                },
                "service_port": {
                    "type": "string"
                }
            }
        },
        "resource.Container": {
            "type": "object",
            "properties": {
                "finished_at": {
                    "description": "Time at which the container last terminated",
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "message": {
                    "description": "Message regarding the last termination of the container",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.ContainerPort"
                    }
                },
                "ready": {
                    "type": "boolean"
                },
                "reason": {
                    "description": "reason from the last termination of the container",
                    "type": "string"
                },
                "restart_count": {
                    "type": "integer"
                },
                "started_at": {
                    "description": "Time at which previous execution of the container started",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "resource.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.\n+optional",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Protocol"
                        }
                    ]
                }
            }
        },
        "resource.HostInfo": {
            "type": "object",
            "properties": {
                "backend": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.Backend"
                    }
                },
                "host": {
                    "type": "string"
                }
            }
        },
        "resource.Pod": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.Container"
                    }
                },
                "containers_message": {
                    "type": "string"
                },
                "containers_ready": {
                    "type": "boolean"
                },
                "createtime": {
                    "type": "integer"
                },
                "enable_debug_container": {
                    "type": "boolean"
                },
                "host_ip": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "node_name": {
                    "type": "string"
                },
                "pod_ready": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "resource.Protocol": {
            "type": "string",
            "enum": [
                "TCP",
                "UDP",
                "SCTP"
            ],
            "x-enum-varnames": [
                "ProtocolTCP",
                "ProtocolUDP",
                "ProtocolSCTP"
            ]
        },
        "service.ConvertVaraibleKVAndYamlActionType": {
            "type": "string",
            "enum": [
                "toKV",
                "toYaml"
            ],
            "x-enum-varnames": [
                "ConvertVaraibleKVAndYamlActionTypeToKV",
                "ConvertVaraibleKVAndYamlActionTypeToYaml"
            ]
        },
        "service.ConvertVaraibleKVAndYamlArgs": {
            "type": "object",
            "required": [
                "action",
                "kvs"
            ],
            "properties": {
                "action": {
                    "$ref": "#/definitions/service.ConvertVaraibleKVAndYamlActionType"
                },
                "kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "service.CreateK8SDeliveryVersionArgs": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "envName": {
                    "type": "string"
                },
                "imageRegistryID": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "productName": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "retry": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                },
                "yamlDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.CreateK8SDeliveryVersionYamlData"
                    }
                }
            }
        },
        "service.CreateK8SDeliveryVersionYamlData": {
            "type": "object",
            "properties": {
                "imageDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_core_delivery_service.ImageData"
                    }
                },
                "serviceName": {
                    "type": "string"
                },
                "yamlContent": {
                    "type": "string"
                }
            }
        },
        "service.CreateSingleProductArg": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "base_env_name": {
                    "type": "string"
                },
                "base_name": {
                    "description": "for collaboration mode",
                    "type": "string"
                },
                "chartValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ProductHelmServiceCreationInfo"
                    }
                },
                "cluster_id": {
                    "type": "string"
                },
                "defaultValues": {
                    "description": "TODO fix me",
                    "type": "string"
                },
                "default_values": {
                    "type": "string"
                },
                "env_configs": {
                    "description": "New Since v1.13.0",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CreateUpdateCommonEnvCfgArgs"
                    }
                },
                "env_name": {
                    "type": "string"
                },
                "global_variables": {
                    "description": "for k8s products",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalVariableKV"
                    }
                },
                "is_existed": {
                    "type": "boolean"
                },
                "istio_grayscale": {
                    "description": "New Since v2.1.0",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.IstioGrayscale"
                        }
                    ]
                },
                "namespace": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "registry_id": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/service.ProductK8sServiceCreationInfo"
                        }
                    }
                },
                "share_env": {
                    "description": "New Since v1.12.0",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProductShareEnv"
                        }
                    ]
                },
                "valuesData": {
                    "description": "for helm products",
                    "allOf": [
                        {
                            "$ref": "#/definitions/service.ValuesDataArgs"
                        }
                    ]
                }
            }
        },
        "service.DeployStatus": {
            "type": "string",
            "enum": [
                "deployed",
                "undeployed"
            ],
            "x-enum-varnames": [
                "StatusDeployed",
                "StatusUnDeployed"
            ]
        },
        "service.DeployableEnv": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "global_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalVariableKV"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceWithVariable"
                    }
                }
            }
        },
        "service.DeployableEnvResp": {
            "type": "object",
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.DeployableEnv"
                    }
                }
            }
        },
        "service.EnvAnalysisCronArg": {
            "type": "object",
            "properties": {
                "cron": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                }
            }
        },
        "service.EnvAnalysisRespone": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        },
        "service.EnvConfigsArgs": {
            "type": "object",
            "properties": {
                "analysis_config": {
                    "$ref": "#/definitions/models.AnalysisConfig"
                },
                "notification_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NotificationConfig"
                    }
                }
            }
        },
        "service.EnvDefinition": {
            "type": "object",
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "env_key": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "service.EnvRendersetArg": {
            "type": "object",
            "properties": {
                "chartValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.HelmSvcRenderArg"
                    }
                },
                "defaultValues": {
                    "type": "string"
                },
                "deployType": {
                    "type": "string"
                },
                "updateServiceTmpl": {
                    "type": "boolean"
                },
                "valuesData": {
                    "$ref": "#/definitions/service.ValuesDataArgs"
                }
            }
        },
        "service.EnvServices": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_core_common_service.EnvService"
                    }
                }
            }
        },
        "service.EnvSleepCronArg": {
            "type": "object",
            "properties": {
                "awake_cron": {
                    "type": "string"
                },
                "awake_cron_enable": {
                    "type": "boolean"
                },
                "sleep_cron": {
                    "type": "string"
                },
                "sleep_cron_enable": {
                    "type": "boolean"
                }
            }
        },
        "service.ExecVmServiceCommandResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "is_success": {
                    "type": "boolean"
                },
                "is_timeout": {
                    "type": "boolean"
                },
                "stderr": {
                    "type": "string"
                },
                "stdout": {
                    "type": "string"
                }
            }
        },
        "service.GetBizDirServiceDetailResponse": {
            "type": "object",
            "properties": {
                "chart_version": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "project_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "update_time": {
                    "type": "integer"
                }
            }
        },
        "service.GetEnvServiceVersionYamlResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "variable_yaml": {
                    "type": "string"
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "service.GetGlobalVariableCandidatesRespone": {
            "type": "object",
            "properties": {
                "key_name": {
                    "type": "string"
                },
                "related_service": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "service.GetPortalServiceResponse": {
            "type": "object",
            "properties": {
                "default_gateway_address": {
                    "type": "string"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.SetupPortalServiceRequest"
                    }
                }
            }
        },
        "service.GetReleaseInstanceDeployStatusResponse": {
            "type": "object",
            "properties": {
                "chart_name": {
                    "type": "string"
                },
                "chart_version": {
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "values": {
                    "type": "string"
                }
            }
        },
        "service.GetServiceVersionYamlResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "variable_yaml": {
                    "type": "string"
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "service.GetSvcRenderArg": {
            "type": "object",
            "properties": {
                "is_helm_chart_deploy": {
                    "type": "boolean"
                },
                "service_or_release_name": {
                    "type": "string"
                }
            }
        },
        "service.GetSvcRenderRequest": {
            "type": "object",
            "properties": {
                "get_svc_render_args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.GetSvcRenderArg"
                    }
                }
            }
        },
        "service.GetWebhookConfigReponse": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "service.GroupDetail": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectDetail"
                    }
                }
            }
        },
        "service.HelmDeployStatusCheckRequest": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "service.HelmSvcRenderArg": {
            "type": "object",
            "properties": {
                "chartVersion": {
                    "type": "string"
                },
                "chart_name": {
                    "type": "string"
                },
                "chart_repo": {
                    "type": "string"
                },
                "deploy_strategy": {
                    "description": "New since 1.16.0, used to determine if the service will be installed",
                    "type": "string"
                },
                "envName": {
                    "type": "string"
                },
                "is_chart_deploy": {
                    "type": "boolean"
                },
                "overrideValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.KVPair"
                    }
                },
                "overrideYaml": {
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                },
                "valuesData": {
                    "$ref": "#/definitions/service.ValuesDataArgs"
                },
                "variable_yaml": {
                    "type": "string"
                },
                "yaml_data": {
                    "$ref": "#/definitions/template.CustomYaml"
                }
            }
        },
        "service.IngressInfo": {
            "type": "object",
            "properties": {
                "host_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.HostInfo"
                    }
                }
            }
        },
        "service.IstioGatewayInfo": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.IstioGatewayServer"
                    }
                }
            }
        },
        "service.IstioGatewayServer": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "port_number": {
                    "type": "integer"
                },
                "port_protocol": {
                    "type": "string"
                }
            }
        },
        "service.IstioGrayscaleChecks": {
            "type": "object",
            "properties": {
                "namespace_has_istio_label": {
                    "type": "boolean"
                },
                "pods_have_istio_proxy": {
                    "type": "boolean"
                },
                "workloads_have_k8s_service": {
                    "type": "boolean"
                },
                "workloads_ready": {
                    "type": "boolean"
                }
            }
        },
        "service.IstioGrayscaleReady": {
            "type": "object",
            "properties": {
                "checks": {
                    "$ref": "#/definitions/service.IstioGrayscaleChecks"
                },
                "is_ready": {
                    "type": "boolean"
                }
            }
        },
        "service.JiraBoardResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "service.JiraProjectResp": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.JiraSprintResp": {
            "type": "object",
            "properties": {
                "completeDate": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "originBoardId": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "service.K8sDeployStatusCheckRequest": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.K8sSvcRenderArg"
                    }
                }
            }
        },
        "service.K8sSvcRenderArg": {
            "type": "object",
            "properties": {
                "deploy_strategy": {
                    "description": "New since 1.16.0, used to determine if the service will be installed",
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "latest_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "latest_variable_yaml": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "service.KVPair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "service.ListEnvServiceVersionsResponse": {
            "type": "object",
            "properties": {
                "create_by": {
                    "type": "string"
                },
                "create_time": {
                    "type": "integer"
                },
                "revision": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "service.ListPodsInfoRespone": {
            "type": "object",
            "properties": {
                "create_time": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ready": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "service.ListReleasePlanResp": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ReleasePlan"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.ListServiceVersionsResponse": {
            "type": "object",
            "properties": {
                "create_by": {
                    "type": "string"
                },
                "create_time": {
                    "type": "integer"
                },
                "revision": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "service.LoadServiceFromYamlTemplateReq": {
            "type": "object",
            "properties": {
                "auto_sync": {
                    "type": "boolean"
                },
                "project_name": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "service_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "template_id": {
                    "type": "string"
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "service.MeegoProject": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.MeegoProjectResp": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.MeegoProject"
                    }
                }
            }
        },
        "service.MeegoWorkItem": {
            "type": "object",
            "properties": {
                "current_state": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.MeegoWorkItemResp": {
            "type": "object",
            "properties": {
                "work_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.MeegoWorkItem"
                    }
                }
            }
        },
        "service.MeegoWorkItemType": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type_key": {
                    "type": "string"
                }
            }
        },
        "service.MeegoWorkItemTypeResp": {
            "type": "object",
            "properties": {
                "work_item_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.MeegoWorkItemType"
                    }
                }
            }
        },
        "service.OpenAPICluster": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "created_time": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "local": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "project_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "integer"
                },
                "provider_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "service.OpenAPICreateClusterRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "kube_config": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "project_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "service.OpenAPICreateClusterResponse": {
            "type": "object",
            "properties": {
                "agent_cmd": {
                    "type": "string"
                },
                "cluster": {
                    "$ref": "#/definitions/service.OpenAPICluster"
                }
            }
        },
        "service.OpenAPICreateHelmDeliveryVersionChartData": {
            "type": "object",
            "properties": {
                "image_datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.OpenAPIDeliveryVersionImageData"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.OpenAPICreateHelmDeliveryVersionRequest": {
            "type": "object",
            "properties": {
                "chart_datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.OpenAPICreateHelmDeliveryVersionChartData"
                    }
                },
                "chart_repo_name": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "image_registry_id": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "production": {
                    "type": "boolean"
                },
                "project_key": {
                    "type": "string"
                },
                "retry": {
                    "type": "boolean"
                },
                "version_name": {
                    "type": "string"
                }
            }
        },
        "service.OpenAPICreateK8SDeliveryVersionRequest": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "env_name": {
                    "type": "string"
                },
                "image_registry_id": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "production": {
                    "type": "boolean"
                },
                "project_key": {
                    "type": "string"
                },
                "retry": {
                    "type": "boolean"
                },
                "version_name": {
                    "type": "string"
                },
                "yaml_datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.OpenAPICreateK8SDeliveryVersionYamlData"
                    }
                }
            }
        },
        "service.OpenAPICreateK8SDeliveryVersionYamlData": {
            "type": "object",
            "properties": {
                "image_datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.OpenAPIDeliveryVersionImageData"
                    }
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "service.OpenAPIDeliveryVersionImageData": {
            "type": "object",
            "properties": {
                "container_name": {
                    "type": "string"
                },
                "disable_image_dist": {
                    "type": "boolean"
                },
                "image_name": {
                    "type": "string"
                },
                "image_tag": {
                    "type": "string"
                }
            }
        },
        "service.OpenAPIEnvGlobalVariables": {
            "type": "object",
            "properties": {
                "global_variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalVariableKV"
                    }
                }
            }
        },
        "service.OpenAPIInitializeProjectReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "env_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.EnvDefinition"
                    }
                },
                "is_public": {
                    "type": "boolean"
                },
                "project_key": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "service_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ServiceDefinition"
                    }
                }
            }
        },
        "service.PreviewServiceArgs": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "service_modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "update_service_revision": {
                    "type": "boolean"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                }
            }
        },
        "service.Product": {
            "type": "object",
            "properties": {
                "base_name": {
                    "type": "string"
                },
                "chartValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.HelmSvcRenderArg"
                    }
                },
                "collaboration_mode": {
                    "type": "string"
                },
                "collaboration_type": {
                    "$ref": "#/definitions/config.CollaborationType"
                },
                "default_values": {
                    "type": "string"
                },
                "deploy_type": {
                    "type": "string"
                },
                "global_variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalVariableKV"
                    }
                },
                "name": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.K8sSvcRenderArg"
                    }
                },
                "valuesData": {
                    "$ref": "#/definitions/service.ValuesDataArgs"
                },
                "yaml_data": {
                    "$ref": "#/definitions/template.CustomYaml"
                }
            }
        },
        "service.ProductHelmServiceCreationInfo": {
            "type": "object",
            "properties": {
                "chartVersion": {
                    "type": "string"
                },
                "chart_name": {
                    "type": "string"
                },
                "chart_repo": {
                    "type": "string"
                },
                "deploy_strategy": {
                    "type": "string"
                },
                "envName": {
                    "type": "string"
                },
                "is_chart_deploy": {
                    "type": "boolean"
                },
                "overrideValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.KVPair"
                    }
                },
                "overrideYaml": {
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                },
                "valuesData": {
                    "$ref": "#/definitions/service.ValuesDataArgs"
                },
                "variable_yaml": {
                    "type": "string"
                },
                "yaml_data": {
                    "$ref": "#/definitions/template.CustomYaml"
                }
            }
        },
        "service.ProductK8sServiceCreationInfo": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "deploy_strategy": {
                    "type": "string"
                },
                "env_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EnvConfig"
                    }
                },
                "error": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "render": {
                    "description": "New since 1.9.0 used to replace service renders in render_set",
                    "allOf": [
                        {
                            "$ref": "#/definitions/template.ServiceRender"
                        }
                    ]
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceResource"
                    }
                },
                "revision": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "update_time": {
                    "type": "integer"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "service.RepoConfig": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "codehostID": {
                    "type": "integer"
                },
                "namespace": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "valuesPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "service.ResourceDeployStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "override_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.KVPair"
                    }
                },
                "override_yaml": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/service.DeployStatus"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "service.SearchBizDirByServiceGroup": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.SearchBizDirByServiceProject"
                    }
                }
            }
        },
        "service.SearchBizDirByServiceProject": {
            "type": "object",
            "properties": {
                "project": {
                    "$ref": "#/definitions/models.ProjectDetail"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "service.ServiceDefinition": {
            "type": "object",
            "properties": {
                "auto_sync": {
                    "type": "boolean"
                },
                "service_name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "template_name": {
                    "type": "string"
                },
                "values_yaml": {
                    "type": "string"
                },
                "variable_yaml": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.KeyValue"
                    }
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "service.ServiceDeployStatus": {
            "type": "object",
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ResourceDeployStatus"
                    }
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "service.ServiceOption": {
            "type": "object",
            "properties": {
                "service": {
                    "$ref": "#/definitions/models.Service"
                },
                "service_module": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_core_service_service.ServiceModule"
                    }
                },
                "service_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "system_variable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_core_service_service.Variable"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "service.ServiceResp": {
            "type": "object",
            "properties": {
                "deploy_strategy": {
                    "type": "string"
                },
                "env_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EnvConfig"
                    }
                },
                "env_name": {
                    "type": "string"
                },
                "env_statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EnvStatus"
                    }
                },
                "error": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ingress": {
                    "$ref": "#/definitions/service.IngressInfo"
                },
                "is_helm_chart_deploy": {
                    "type": "boolean"
                },
                "istio_gateway": {
                    "$ref": "#/definitions/service.IstioGatewayInfo"
                },
                "product_name": {
                    "type": "string"
                },
                "ready": {
                    "description": "deprecated",
                    "type": "string"
                },
                "release_name": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                },
                "service_display_name": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "workLoadType": {
                    "type": "string"
                },
                "zadigx_release_tag": {
                    "type": "string"
                },
                "zadigx_release_type": {
                    "description": "ZadigXReleaseType represents the service contain created by zadigx release workflow\nfrontend should limit some operations on these services",
                    "type": "string"
                }
            }
        },
        "service.SetupPortalServiceRequest": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "port_number": {
                    "type": "integer"
                },
                "port_protocol": {
                    "type": "string"
                }
            }
        },
        "service.SharedNSEnvs": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "production": {
                    "type": "boolean"
                },
                "project_name": {
                    "type": "string"
                }
            }
        },
        "service.SvcDiffResult": {
            "type": "object",
            "properties": {
                "chart_name": {
                    "type": "string"
                },
                "current": {
                    "$ref": "#/definitions/service.TmplYaml"
                },
                "deployed_from_chart": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "latest": {
                    "$ref": "#/definitions/service.TmplYaml"
                },
                "release_name": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "service.SvcRevision": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Container"
                    }
                },
                "current_revision": {
                    "type": "integer"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deploy_strategy": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "new": {
                    "type": "boolean"
                },
                "next_revision": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatable": {
                    "type": "boolean"
                },
                "update_service_tmpl": {
                    "type": "boolean"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "service.SyncCollaborationInstanceArgs": {
            "type": "object",
            "properties": {
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Product"
                    }
                }
            }
        },
        "service.TmplYaml": {
            "type": "object",
            "properties": {
                "revision": {
                    "type": "integer"
                },
                "update_by": {
                    "type": "string"
                },
                "yaml": {
                    "type": "string"
                }
            }
        },
        "service.UpdateEnv": {
            "type": "object",
            "properties": {
                "env_name": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.UpdateServiceArg"
                    }
                }
            }
        },
        "service.UpdateMultiHelmProductArg": {
            "type": "object",
            "properties": {
                "chartValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.HelmSvcRenderArg"
                    }
                },
                "deletedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "productName": {
                    "type": "string"
                },
                "replacePolicy": {
                    "description": "TODO logic not implemented",
                    "type": "string"
                }
            }
        },
        "service.UpdateServiceArg": {
            "type": "object",
            "properties": {
                "deploy_strategy": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                }
            }
        },
        "service.ValuesDataArgs": {
            "type": "object",
            "properties": {
                "autoSync": {
                    "type": "boolean"
                },
                "gitRepoConfig": {
                    "$ref": "#/definitions/service.RepoConfig"
                },
                "source_id": {
                    "type": "string"
                },
                "yamlSource": {
                    "type": "string"
                }
            }
        },
        "setting.IntegrationLevel": {
            "type": "string",
            "enum": [
                "system",
                "project"
            ],
            "x-enum-varnames": [
                "IntegrationLevelSystem",
                "IntegrationLevelProject"
            ]
        },
        "setting.PMHostStatus": {
            "type": "string",
            "enum": [
                "normal",
                "abnormal"
            ],
            "x-enum-varnames": [
                "PMHostStatusNormal",
                "PMHostStatusAbnormal"
            ]
        },
        "setting.SQLExecStatus": {
            "type": "string",
            "enum": [
                "success",
                "failed",
                "not_exec"
            ],
            "x-enum-varnames": [
                "SQLExecStatusSuccess",
                "SQLExecStatusFailed",
                "SQLExecStatusNotExec"
            ]
        },
        "template.CustomYaml": {
            "type": "object",
            "properties": {
                "auto_sync": {
                    "type": "boolean"
                },
                "render_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "source": {
                    "type": "string"
                },
                "source_detail": {},
                "source_id": {
                    "type": "string"
                },
                "yaml_content": {
                    "type": "string"
                }
            }
        },
        "template.GitRepoConfig": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "codehost_id": {
                    "type": "integer"
                },
                "namespace": {
                    "description": "records the actual namespace of repo, used to generate correct project name",
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "values_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "template.RenderKV": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "template.ServiceRender": {
            "type": "object",
            "properties": {
                "chart_name": {
                    "type": "string"
                },
                "chart_repo": {
                    "description": "---- for helm services begin ----",
                    "type": "string"
                },
                "chart_version": {
                    "type": "string"
                },
                "is_helm_chart_deploy": {
                    "type": "boolean"
                },
                "override_values": {
                    "description": "used for helm services, json-encoded string of kv value",
                    "type": "string"
                },
                "override_yaml": {
                    "description": "OverrideYaml will be used in both helm and k8s projects\nIn k8s this is variable_yaml",
                    "allOf": [
                        {
                            "$ref": "#/definitions/template.CustomYaml"
                        }
                    ]
                },
                "release_name": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "values_yaml": {
                    "type": "string"
                }
            }
        },
        "template.YamlDetail": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "service_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "template.YamlTemplate": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "service_variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ServiceVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "types.AuthType": {
            "type": "string",
            "enum": [
                "SSH",
                "PrivateAccessToken"
            ],
            "x-enum-varnames": [
                "SSHAuthType",
                "PrivateAccessTokenAuthType"
            ]
        },
        "types.GlobalVariableKV": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "related_services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/types.ServiceVariableKVType"
                },
                "value": {}
            }
        },
        "types.RenderVariableKV": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/types.ServiceVariableKVType"
                },
                "use_global_variable": {
                    "type": "boolean"
                },
                "value": {}
            }
        },
        "types.RepoSource": {
            "type": "string",
            "enum": [
                "",
                "param",
                "job"
            ],
            "x-enum-varnames": [
                "RepoSourceRuntime",
                "RepoSourceParam",
                "RepoSourceJob"
            ]
        },
        "types.Repository": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "auth_type": {
                    "description": "The address of the code base input of the other type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.AuthType"
                        }
                    ]
                },
                "author_name": {
                    "type": "string"
                },
                "branch": {
                    "type": "string"
                },
                "checkout_path": {
                    "type": "string"
                },
                "checkout_ref": {
                    "type": "string"
                },
                "codehost_id": {
                    "type": "integer"
                },
                "commit_id": {
                    "type": "string"
                },
                "commit_message": {
                    "type": "string"
                },
                "enable_commit": {
                    "description": "EnableCommit marks if the pull uses a commit instead of branch/pr",
                    "type": "boolean"
                },
                "enable_proxy": {
                    "description": "Now EnableProxy is not something we store. We decide this on runtime",
                    "type": "boolean"
                },
                "filter_regexp": {
                    "description": "FilterRegexp is the regular expression filter for the branches and tags",
                    "type": "string"
                },
                "hidden": {
                    "description": "Hidden defines whether the frontend needs to hide this repo",
                    "type": "boolean"
                },
                "is_primary": {
                    "description": "IsPrimary used to generated image and package name, each build has one primary repo",
                    "type": "boolean"
                },
                "job_name": {
                    "type": "string"
                },
                "oauth_token": {
                    "description": "add",
                    "type": "string"
                },
                "param_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "pr": {
                    "type": "integer"
                },
                "private_access_token": {
                    "type": "string"
                },
                "prs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "remote_name": {
                    "type": "string"
                },
                "repo_index": {
                    "type": "integer"
                },
                "repo_name": {
                    "type": "string"
                },
                "repo_namespace": {
                    "type": "string"
                },
                "repo_owner": {
                    "type": "string"
                },
                "service_module": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "source_from": {
                    "description": "repo can come from params or other job, introduced in 1.3.1",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.RepoSource"
                        }
                    ]
                },
                "ssh_key": {
                    "type": "string"
                },
                "submission_id": {
                    "type": "string"
                },
                "submodules": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                },
                "use_default": {
                    "description": "UseDefault defines if the repo can be configured in start pipeline task page",
                    "type": "boolean"
                },
                "username": {
                    "description": "username/password authorization",
                    "type": "string"
                }
            }
        },
        "types.ServiceVariableKV": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/types.ServiceVariableKVType"
                },
                "value": {}
            }
        },
        "types.ServiceVariableKVType": {
            "type": "string",
            "enum": [
                "bool",
                "string",
                "enum",
                "yaml"
            ],
            "x-enum-varnames": [
                "ServiceVariableKVTypeBoolean",
                "ServiceVariableKVTypeString",
                "ServiceVariableKVTypeEnum",
                "ServiceVariableKVTypeYaml"
            ]
        },
        "types.ServiceWithVariable": {
            "type": "object",
            "properties": {
                "service_name": {
                    "type": "string"
                },
                "variable_kvs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RenderVariableKV"
                    }
                },
                "variable_yaml": {
                    "type": "string"
                }
            }
        },
        "util.KeyValue": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "webhooknotify.WebHookNotify": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/webhooknotify.WebHookNotifyEvent"
                },
                "object_kind": {
                    "$ref": "#/definitions/webhooknotify.WebHookNotifyObjectKind"
                },
                "workflow": {
                    "$ref": "#/definitions/webhooknotify.WorkflowNotify"
                }
            }
        },
        "webhooknotify.WebHookNotifyEvent": {
            "type": "string",
            "enum": [
                "workflow"
            ],
            "x-enum-varnames": [
                "WebHookNotifyEventWorkflow"
            ]
        },
        "webhooknotify.WebHookNotifyObjectKind": {
            "type": "string",
            "enum": [
                "workflow"
            ],
            "x-enum-varnames": [
                "WebHookNotifyObjectKindWorkflow"
            ]
        },
        "webhooknotify.WorkflowNotify": {
            "type": "object",
            "properties": {
                "create_time": {
                    "type": "integer"
                },
                "detail_url": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string"
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhooknotify.WorkflowNotifyStage"
                    }
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_config.Status"
                },
                "task_creator": {
                    "type": "string"
                },
                "task_creator_email": {
                    "type": "string"
                },
                "task_creator_id": {
                    "type": "string"
                },
                "task_creator_phone": {
                    "type": "string"
                },
                "task_id": {
                    "type": "integer"
                },
                "workflow_display_name": {
                    "type": "string"
                },
                "workflow_name": {
                    "type": "string"
                }
            }
        },
        "webhooknotify.WorkflowNotifyDeployServiceModule": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "service_module": {
                    "type": "string"
                }
            }
        },
        "webhooknotify.WorkflowNotifyJobTask": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "spec": {},
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_config.Status"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "webhooknotify.WorkflowNotifyJobTaskBuildSpec": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhooknotify.WorkflowNotifyRepository"
                    }
                }
            }
        },
        "webhooknotify.WorkflowNotifyJobTaskDeploySpec": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "service_modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhooknotify.WorkflowNotifyDeployServiceModule"
                    }
                },
                "service_name": {
                    "type": "string"
                }
            }
        },
        "webhooknotify.WorkflowNotifyRepository": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "commit_id": {
                    "type": "string"
                },
                "commit_message": {
                    "type": "string"
                },
                "commit_url": {
                    "type": "string"
                },
                "prs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "repo_name": {
                    "type": "string"
                },
                "repo_namespace": {
                    "type": "string"
                },
                "repo_owner": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "webhooknotify.WorkflowNotifyStage": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhooknotify.WorkflowNotifyJobTask"
                    }
                },
                "name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/github_com_koderover_zadig_v2_pkg_microservice_aslan_config.Status"
                }
            }
        },
        "workflow.GetHelmValuesDifferenceResp": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "string"
                },
                "latest": {
                    "type": "string"
                }
            }
        },
        "workflow.ManualExecWorkflowTaskV4Request": {
            "type": "object",
            "properties": {
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Job"
                    }
                }
            }
        },
        "workwx.ApprovalNode": {
            "type": "object",
            "properties": {
                "apv_rel": {
                    "$ref": "#/definitions/workwx.ApprovalRel"
                },
                "status": {
                    "$ref": "#/definitions/workwx.ApprovalNodeStatus"
                },
                "sub_nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workwx.ApprovalSubNode"
                    }
                },
                "type": {
                    "$ref": "#/definitions/workwx.ApprovalType"
                },
                "userid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workwx.ApprovalUser"
                    }
                }
            }
        },
        "workwx.ApprovalNodeStatus": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                11,
                12,
                13,
                14,
                15
            ],
            "x-enum-varnames": [
                "ApprovalNodeStatusWaiting",
                "ApprovalNodeStatusApproved",
                "ApprovalNodeStatusRejected",
                "ApprovalNodeStatusForwarded",
                "ApprovalNodeStatusThrowBackForwarded",
                "ApprovalNodeStatusAddApprover",
                "ApprovalNodeStatusApprovedAndAddApprover",
                "ApprovalNodeStatusProcessing",
                "ApprovalNodeStatusMoved"
            ]
        },
        "workwx.ApprovalRel": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "ApprovalRelAnd",
                "ApprovalRelOr"
            ]
        },
        "workwx.ApprovalSubNode": {
            "type": "object",
            "properties": {
                "speech": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/workwx.ApprovalSubNodeStatus"
                },
                "timestamp": {
                    "type": "integer"
                },
                "user_info": {
                    "type": "object",
                    "properties": {
                        "user_id": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "workwx.ApprovalSubNodeStatus": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                11,
                12,
                13,
                14,
                15
            ],
            "x-enum-varnames": [
                "ApprovalSubNodeStatusWaiting",
                "ApprovalSubNodeStatusApproved",
                "ApprovalSubNodeStatusRejected",
                "ApprovalSubNodeStatusForwarded",
                "ApprovalSubNodeStatusThrowBackForwarded",
                "ApprovalSubNodeStatusAddApprover",
                "ApprovalSubNodeStatusApprovedAndAddApprover",
                "ApprovalSubNodeStatusProcessing",
                "ApprovalSubNodeStatusMoved"
            ]
        },
        "workwx.ApprovalType": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "ApprovalTypeApprove",
                "ApprovalTypeCC"
            ]
        },
        "workwx.ApprovalUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}